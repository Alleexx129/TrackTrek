import yt_dlp
import os
import re
import requests
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, ID3NoHeaderError, TIT2, TPE1, TALB, TCON, TDRC, COMM, APIC
from PIL import Image
from io import BytesIO

def sanitize_filename(filename):
    return re.sub(r'[<>:"/\\|?*]', '', filename)

class loggerOutputs:
    def error(msg):
        a=1 # remove warnings srry didn't find any other ways ;)
    def warning(msg):
        a=1 # remove warnings srry didn't find any other ways ;)
    def debug(msg):
        a=1 # remove warnings srry didn't find any other ways ;)

def search_video(query):
    search_opts = {
        'quiet': True,
        'format': 'bestaudio/best',
        "logger": loggerOutputs,
        'noplaylist': True,
    }
    with yt_dlp.YoutubeDL(search_opts) as ydl:
        search_result = ydl.extract_info(f"ytsearch5:{query}", download=False)
        return search_result['entries'] if 'entries' in search_result else []

def download_audio(video_url, title, artist):
    sanitized_title = sanitize_filename(f"{title} - {artist}")
    output_template = f"./{sanitized_title}"
    ydl_opts = {
        'format': 'bestaudio/best',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'outtmpl': output_template,
        'quiet': True,
        'http_chunk_size': 1024 * 1024,
        'concurrent_fragments': 10,
    }
    print("Loading...")  # Print loading message
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([video_url])
    except Exception as e:
        if "nsig extraction failed" in str(e):
            print("Warning suppressed: nsig extraction failed. You may experience throttling for some formats.")
        else:
            print(f"An error occurred: {e}")

    return output_template + ".mp3"

def add_metadata_to_mp3(file_path, info):
    try:
        audio = MP3(file_path, ID3=ID3)
    except ID3NoHeaderError:
        audio.add_tags()

    # Add metadata
    audio['TIT2'] = TIT2(encoding=3, text=info['title'])
    audio['TPE1'] = TPE1(encoding=3, text=info['artist'])
    audio['TALB'] = TALB(encoding=3, text=info['album'])
    audio['TCON'] = TCON(encoding=3, text=info.get('genre', 'Unknown'))

    if info.get('release_date'):
        audio['TDRC'] = TDRC(encoding=3, text=info['release_date'])

    audio['COMM'] = COMM(encoding=3, lang='eng', text='Generated by script')

    artwork_url = info.get('artwork_url', None)
    if artwork_url:
        try:
            artwork_response = requests.get(artwork_url, stream=True)
            if artwork_response.status_code == 200:
                img = Image.open(BytesIO(artwork_response.content))
                img_format = 'JPEG' if img.format == 'WEBP' else img.format
                with BytesIO() as output:
                    img.save(output, format=img_format)
                    output.seek(0)
                    audio['APIC'] = APIC(
                        encoding=3,
                        mime='image/jpeg',
                        type=3,
                        desc='Cover',
                        data=output.getvalue()
                    )
        except Exception as e:
            print(f"Error adding artwork: {e}")

    audio.save()

def is_valid_youtube_url(url):
    return re.match(r'^https?://(www\.)?(youtube\.com|youtu\.?be)/.+$', url) is not None

def main():
    keyword = input("Enter the song keyword or YouTube link: \n>> ")
    print("Loading...")

    if is_valid_youtube_url(keyword):
        video_url = keyword
        video_info = yt_dlp.YoutubeDL({'quiet': True}).extract_info(video_url, download=False)
        video_title = video_info['title']
        video_artist = video_info['uploader']
    else:
        video_results = search_video(keyword)
        if not video_results:
            print("No results found.")
            return

        print("\nTop 5 search results:")
        for i, video in enumerate(video_results[:5], start=1):
            print(f"{i}. {video['title']} by {video['uploader']} (Views: {video['view_count']})")

        selection = int(input("\nSelect a video (1-5): ")) - 1
        if selection < 0 or selection >= 5:
            print("Invalid selection.")
            return

        selected_video = video_results[selection]
        video_url = selected_video['url']
        video_title = selected_video['title']
        video_artist = selected_video['uploader']

    output_file = download_audio(video_url, video_title, video_artist)
    print(f"Download complete: {output_file}")

    add_metadata_to_mp3(output_file, {
        'title': video_title,
        'artist': video_artist,
        'album': 'YouTube',
        'artwork_url': video_info.get('thumbnail', None) if 'video_info' in locals() else selected_video.get('thumbnail', None),
        'release_date': video_info.get('upload_date', None) if 'video_info' in locals() else selected_video.get('upload_date', None)
    })

if __name__ == "__main__":
    main()
